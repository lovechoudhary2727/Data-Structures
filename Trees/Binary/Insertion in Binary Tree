#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

struct node{

	int data;
	struct node* left;
	struct node* right;
};

//creating root node
struct node* CreateNode(int x)										
{
	struct node *root = (struct node*)malloc(sizeof(struct node));		//Dynammically allocating memory for root node
	root->data = x;
	root->right = NULL;
	root->left = NULL;

	return root;			//returning address of root node
}

void InsertNode(struct node *root,int key)
{
	if(root == NULL)					//If there is no element in tree then insert at root level
		CreateNode(root,key);

	queue<struct node*> q;				// Level order traversing for a node with either let/right child empty.
	q.push(root);

	while(!q.empty())
	{
		struct node* temp = q.front();
		q.pop();

		if(root->left != NULL)			
			q.push(root->left);
		else
			CreateNode(root->left,key);

		if(root->right != NULL)
			q.push(root->right);
		else
			CreateNode(root->right,key);
	}
}

int main()
{
	//fastIO();		

	struct Node* root = CreateNode(10);
    root->left = CreateNode(11);
    root->left->left = CreateNode(7);
    root->right = CreateNode(9);
    root->right->left = CreateNode(15);
    root->right->right = CreateNode(8);

    int key = 12;
    InsertNode(root, key);

	return 0;
}
