#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

struct node{

	int data;
	struct node* left;
	struct node* right;
};

//creating root node
struct node* newNode(int x)										
{
	struct node *root = (struct node*)malloc(sizeof(struct node));		//Dynammically allocating memory for root node
	root->data = x;
	root->right = NULL;
	root->left = NULL;

	return root;			//returning address of root node
}
***************************************************************   O(h) Approach   *********************************************************************************************

string areMirrors(struct node *root1, struct node *root2) 
{ 
    stack<node*> st1, st2; 
    while (1) 
    { 
        // iterative inorder traversal of 1st tree and 
        // reverse inoder traversal of 2nd tree 
        while (root1 && root2) 
        { 
            // if the corresponding nodes in the two traversal 
            // have different data values, then they are not 
            // mirrors of each other. 
            if (root1->data != root2->data) 
                return "No"; 
                  
            st1.push(root1); 
            st2.push(root2); 
            root1 = root1->left; 
            root2 = root2->right;     
        } 
          
        // if at any point one root becomes null and 
        // the other root is not null, then they are  
        // not mirrors. This condition verifies that 
        // structures of tree are mirrors of each other. 
        if (!(root1 == NULL && root2 == NULL)) 
            return "No"; 
              
        if (!st1.empty() && !st2.empty()) 
        { 
            root1 = st1.top(); 
            root2 = st2.top(); 
            st1.pop();  
            st2.pop(); 
              
            /* we have visited the node and its left subtree. 
               Now, it's right subtree's turn */
            root1 = root1->right; 
              
            /* we have visited the node and its right subtree. 
               Now, it's left subtree's turn */
            root2 = root2->left; 
        }     
          
        // both the trees have been completely traversed 
        else
            break; 
    } 
      
    // tress are mirrors of each other 
    return "Yes"; 
}

******************************************************************************************************************************************************************************
*************************************************************   O(n) Approach - using level order traversal   ****************************************************************
string areMirror(struct node* root1, struct node* root2) {
    
    queue<node*> q;
    q.push(root1);
    q.push(root2);
    
    while(!q.empty())
    {
        struct node *x = q.front();
        q.pop();
        struct node *y = q.front();
        q.pop();
        
        if(x!=NULL && y!=NULL)
        {
            if(x->data == y->data)
            {
                if(x->left != NULL && y->right != NULL)
                {
                    q.push(x->left);
                    q.push(y->right);
                }
                if(x->right != NULL && y->left != NULL)
                {
                    q.push(x->right);
                    q.push(y->left);                
                }
 
            }
            else
                return "Yes";
            
        }
        else if(!(x==NULL && y==NULL))
            return "No";
        
    }
    
    return "Yes";
    
}

******************************************************************************************************************************************************************************

int main()
{
	//fastIO();

    // construct a tree
    // 1st binary tree formation 
    struct node *root1 = newNode(1);            /*         1          */                      
    root1->left = newNode(3);            /*       /   \        */
    root1->right = newNode(2);           /*      3     2       */ 
    root1->right->left = newNode(5);     /*          /   \     */  
    root1->right->right = newNode(4);    /*         5     4    */
      
    // 2nd binary tree formation     
    struct node *root2 = newNode(1);            /*         1          */                      
    root2->left = newNode(2);            /*       /   \        */
    root2->right = newNode(3);           /*      2     3       */
    root2->left->left = newNode(4);      /*    /   \           */
    root2->left->right = newNode(5);     /*   4    5           */
          
    cout << areMirrors(root1, root2) << "\n";


	return 0;
}
