#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

struct node{

	int data;
	struct node* left;
	struct node* right;
};

//creating root node
struct node* CreateNode(int x)										
{
	struct node *root = (struct node*)malloc(sizeof(struct node));		//Dynammically allocating memory for root node
	root->data = x;
	root->right = NULL;
	root->left = NULL;

	return root;			//returning address of root node
}

void inorderUS(struct node *root)
{
    stack<node*> s;					// Declaring a stack
    struct node *curr = root;
    
    while(curr!=NULL || !s.empty())
    {
    	// Is pure tree ko traverse krne k liye, i have to traverse its root node 
        while(curr!=NULL)
        {
            s.push(curr);
            curr  = curr->left;				// And to access this root node i have to travere its left subtree first(INORDER TRAVERSAL)
        }
        
        // curr == NULL , means 
		// (1) Left subtree of a parent node is fully traversed, therefore access/print this parent/root node & now we ahve to traverse right subtree of this parent/root node && s.top() now point to parent(left Subtree) .
        // (2) Right Subtree is also fully traverse and s.top() now points to 'parent(parent(right subtree))'.
        curr = s.top();
        cout << curr->data << " ";

        // Pop the root node so that it cannot be traversed again.
        s.pop();
        
        // Once the root node is accessed we have to traverse the right subtree(INORDER TRAVERSAL).
        curr = curr->right;
    }
}

int main()
{
	//fastIO();

    struct node *root =CreateNode(1); 
    root->left        = CreateNode(2); 
    root->right       = CreateNode(3); 
    root->left->left  = CreateNode(4); 
    root->left->right = CreateNode(5); 
  
    inorderUS(root); 

	return 0;
}
