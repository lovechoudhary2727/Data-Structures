#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

struct node{

	int data;
	struct node* left;
	struct node* right;
};

//creating root node
struct node* CreateNode(int x)										
{
	struct node *root = (struct node*)malloc(sizeof(struct node));		//Dynammically allocating memory for root node
	root->data = x;
	root->right = NULL;
	root->left = NULL;

	return root;			//returning address of root node
}

void inorder(struct node *root,int n)
{
	static int count = 0;

	if(root == NULL)
		return ;

	if(count <= n)
	{
		inorder(root->left,n);
		count++;

		if(count == n)
			cout << root-> data;

		inorder(root->right,n);
	}

}

int main()
{
	//fastIO();

    struct node *root =CreateNode(0); 
    root->left        = CreateNode(1); 
    root->right       = CreateNode(2); 
    root->left->left  = CreateNode(3); 
    root->left->right = CreateNode(4);
    root->right->left  = CreateNode(5); 
    root->right->right = CreateNode(6);

    int n;
    cin >> n;

    inorder(root,n); 

	return 0;
}
