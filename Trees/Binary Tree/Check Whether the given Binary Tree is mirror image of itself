#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

struct node{

	int data;
	struct node* left;
	struct node* right;
};

//creating root node
struct node* CreateNode(int x)										
{
	struct node *root = (struct node*)malloc(sizeof(struct node));		//Dynammically allocating memory for root node
	root->data = x;
	root->right = NULL;
	root->left = NULL;

	return root;			//returning address of root node
}

bool isIdentical(struct node* root1,struct node* root2)
{
	//Here we are always pointing to root nodes therefore root1 = root2 = NULL simultaneously to be identical.
	if(root1 == NULL && root2 == NULL)
		return true;
	if(root1 == NULL || root2 == NULL)
		return false;

	/* A binary tree is said to be mirror image of itself iff:
		1. root1->data == root2->data
		2. root1->left ~ root2->right && root1->right ~ root2->left
	*/
	if(root1->data == root2->data)
		return isIdentical(root1->left,root2->right) && isIdentical(root1->right,root2->left);

}

bool isSymmetric(struct node* root)
{
	return isIdentical(root,root);
}

int main()
{
	//fastIO();

	//pre-constructed binary tree		
    struct node *root  = CreateNode(1); 
    root->left         = CreateNode(2); 
    root->right        = CreateNode(2); 
    root->left->left   = CreateNode(3); 
    root->left->right  = CreateNode(4); 
    root->right->left  = CreateNode(4); 
    root->right->right = CreateNode(3); 
  
  	//function to check whether the tree is mirror imageof itself/not.
    cout << isSymmetric(root);

	return 0;
}
