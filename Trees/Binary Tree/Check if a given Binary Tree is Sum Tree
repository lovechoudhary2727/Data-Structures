#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

struct node{

	int data;
	struct node* left;
	struct node* right;
};

//creating root node
struct node* CreateNode(int x)										
{
	struct node *root = (struct node*)malloc(sizeof(struct node));		//Dynammically allocating memory for root node
	root->data = x;
	root->right = NULL;
	root->left = NULL;

	return root;			//returning address of root node
}

*******************************************************   O(n^2) Aproach using recursion    **********************************************************************************
int sum(struct node *root)
{
	if(root == NULL)
		return 0;
	return sum(root->left) + root->data + sum(root->right);
}

// Overall O(n^2)
bool isSumTree(struct node* root)	// O(n)
{
	//Base cases
	if(root == NULL || (root->left == NULL && root->right == NULL))
		return true;

	int leftsum = sum(root->left);			// O(n)
	int rightsum = sum(root->right);

	if(root->data == leftsum+rightsum)
		return isSumTree(root->left) && isSumTree(root->right);
	return false;
}
******************************************************************************************************************************************************************************

*******************************************************   O(n) Approach using post order traversal  **************************************************************************
/*
	pair.first(int) = sum of left/right subtree 
	pair.second(bool) = checks whether left/right subtree is SumTree or not. 
*/
pair<int,bool> postorder(struct node *root)
{
	//Base case
    if(root == NULL)			
        return {0,true};
    if(root->left == NULL && root->right == NULL)
        return {root->data,true};
        
    pair<int,bool> x = postorder(root->left);
    pair<int,bool> y = postorder(root->right);
    
    if(x.second == true && y.second == true)		//If both left and right subtree are sumtree then check for the current rooted tree
    {
        if(root->data == x.first + y.first)
            return {x.first + root->data + y.first , true};
        else
            return {x.first + root->data + y.first , false};
    }

    //Otherwise return false
    return {x.first + root->data + y.first , false};
}

bool isSumTree(struct node* root)
{
     pair<int,bool> res = postorder(root);
     return res.second;
}

******************************************************************************************************************************************************************************

int main()
{
	//fastIO();

    struct node *root = CreateNode(26); 
    root->left        = CreateNode(10); 
    root->right       = CreateNode(3); 
    root->left->left  = CreateNode(6); 
    root->left->right = CreateNode(4);
    root->right->left = CreateNode(3); 

	cout << isSumTree(root) << "\n"; 

	return 0;
}
