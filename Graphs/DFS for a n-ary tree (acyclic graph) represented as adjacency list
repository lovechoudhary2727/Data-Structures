#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

//O(1) - Space
void DFS(vector<int> arr[],int node,int parent)
{
	vector<int>:: iterator it;
	for(it=arr[node].begin();it!=arr[node].end();it++)
	{
		if(*it != parent)				// *it must not be equal to the parent of "node".		
			DFS(arr,*it,node);
	}
}

int main()
{
	//fastIO();

	int V,E;
	cin >> V >> E;

	vector<int> arr[V];
	for(int i=0;i<E;i++)
	{
		int u,v;
		cin >> u >> v;

		arr[u].push_back(v);	// Directed graph
		arr[v].push_back(u);	// Undirected graph
	}

	DFS(arr,0,-1);			// In case of trees, root node can be taken as source node having no parent

	return 0;
}
