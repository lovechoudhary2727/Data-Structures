#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

bool visited[1001];

// DFS is modified on the basis of intime and outime
//inTime[i] is the time when a node i is visited for the first time
//outTime is the time when we backtrack from a node after visiting all of its adjacent nodes
void DFS(vector<int> arr[],int node,int inTime[],int outTime[])
{
	int static time=0;

	visited[node] = true;
	inTime[node] = time;
	time++;

	vector<int>:: iterator it;
	for(it=arr[node].begin();it!=arr[node].end();it++)
	{
		if(visited[*it] == false)
			DFS(arr,*it,inTime,outTime);
	}

	outTime[node] = time;
	time++;

}

int main()
{
	//fastIO();		

	memset(visited,false,sizeof(visited));

	int V,E,Q;
	cin >> V >> E >> Q;

	vector<int> arr[V];		//Adjacency list based representation
	for(int i=0;i<E;i++)
	{
		int u,v;
		cin >> u >> v;

		arr[u].push_back(v);	// Directed graph
		arr[v].push_back(u);	// Undirected graph
	}

	int inTime[V],outTime[V];

	DFS(arr,0,inTime,outTime);

	while(Q--)
	{
		int n1,n2;
		cin >> n1 >> n2;

		//For any node pair (u,v) if u & v lies on the same path then 'u' is visited before 'v' and 'v' is backtracked before 'u' which can be understood using inTime & outTime 
		if(inTime[n1] < inTime[n2] && outTime[n1] > outTime[n2])
			cout << "Both nodes lies on the same path\n";
		else
			cout << "Lies on different path\n";
		
	}

	return 0;
}
