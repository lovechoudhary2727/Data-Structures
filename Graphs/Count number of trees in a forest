#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

bool visited[1001];

void DFS(vector<int> arr[],int s)
{
	visited[s] = true;

	vector<int>:: iterator it;
	for(it=arr[s].begin();it!=arr[s].end();it++)
		if(visited[*it] == false)
			DFS(arr,*it);

}

int main()
{
	//fastIO();

	memset(visited,false,sizeof(visited));

	int V,E;
	cin >> V >> E;

	vector<int> arr[V];
	for(int i=0;i<E;i++)
	{
		int u,v;
		cin >> u >> v;

		arr[u].push_back(v);	// Directed graph
		arr[v].push_back(u);	// Undirected graph
	}

	int count = 0;
	for(int i=0;i<V;i++)
		if(visited[i] == false)
		{
			count++;						// no. of trees in the forest is basically equal to the number of disconnected components in the graph
			DFS(arr,i);
		}

	cout << "No. of trees in forest = " << count << "\n"; 

	return 0;
}
