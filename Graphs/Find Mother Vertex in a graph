/*
  Algo -> Keep a track of Last visited vertices and last visited vertex will be the mother vertex if applying DFS after it none of the node remain unvisited.
  
  Think whether the last visited vertex can be the root vertex of tree or not??
  Ans = Yes, Think !
*/
#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

bool visited[1001];

void DFS(vector<int> arr[],int node)		// Applying DFS to node i
{
	if(visited[node] == true)
		return ;

	visited[node] = true;
	vector<int>:: iterator it;
	for(it=arr[node].begin();it!=arr[node].end();it++)
		DFS(arr,*it);
}

int main()
{
	//fastIO();

	int V,E;
	cin >> V >> E;

	vector<int> arr[V];
	for(int i=0;i<E;i++)
	{
		int u,v;
		cin >> u >> v;

		arr[u].push_back(v);	// Directed Graph
	}

	int lev=0;			// Initially let last visited vertex be 0 
	for(int i=0;i<V;i++)
	{
		if(visited[i] == false)
		{
			lev = i;		// updating last visited vertex and calling DFS for that vertex & this is analogous to the Brute force solution where we were 
						   applying DFS for each vertex but here we are appling only when we update last visited vertex.
			DFS(arr,i);
		}
	}

	int flag=0;
	for(int i=0;i<V;i++)
	{
		if(visited[i] == false)
		{
			flag=1;			// If any of the vertex remains unvisited then mother vertex can't be found.
			break;
		}
	}

	if(flag==0)
		cout << "Mother vertex : " << lev << "\n";
	else
		cout << "No mother vertex\n";

	return 0;
}
