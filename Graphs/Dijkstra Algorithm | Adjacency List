#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

int SelectMinVertex(int V,int dist[],bool processed[])
{
	int mn = INT_MAX;
	int me;
	for(int i=0;i<V;i++)
	{
		if(dist[i] <= mn && processed[i]==false)
		{
			mn = dist[i];
			me = i;
		}
	}

	return mn;
}

void Dijkstra(vector<vector<int> >& adj,int V,int src)
{
	int dist[V],parent[V];						
	bool processed[V];

	memset(processed,false,sizeof(processed));		// Initially all nodes are marked un-processed
	for(int i=0;i<1001;i++)
		dist[i] = INT_MAX;								// Initially distance of all nodes from the source node is considered to be infinity.

	dist[src] = 0;									// Distance of source node from itself is 0
	parent[src] = -1;		

	for(int i=0;i<V-1;i++)							// Since all nodes has to be processed
	{
		int mn = SelectMinVertex(V,dist,processed);		// Selecting minimum distanced node 
		processed[mn] = true;							// Mark it processed
		for(int j=0;j<V;j++)							// For all its un-processed adjacent nodes
		{
			if(adj[mn][j]!=0 && dist[mn]!=INF && processed[j]==false && dist[mn]+adj[mn][j] < dist[j])
			{
				dist[j] = dist[mn] + adj[mn][j];
				parent[j] = mn;
			}
		}
	}

}

int main()
{
	//fastIO();

	int V,E;				// Taking no. of nodes & edges as input.
	cin >> V >> E;

	vector<vector<int> > adj(V,vector<int>(V,0));		// Declaring an Adjacency Matrix V*V
	for(int i=0;i<E;i++)
	{
		int u,v,w;
		cin >> u >> v >> w;
		adj[u][v] = w;
		adj[v][u] = w;		
	}

	Dijkstra(adj,V,0);		// Calling Dijkstra's Function.

	return 0;
}
