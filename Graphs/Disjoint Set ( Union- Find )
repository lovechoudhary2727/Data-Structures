#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

int parent[1001];			//Declaring a parent array storing parent of the ith node.
	
int find(int n)				// Recursively finds absolute root of a node 'n'.				
{
	if(parent[n] == -1)
		return n;

	find(parent[n]);
}

void union(int x,int y)		// Takes Union of 2 sets
{
	int ARx = find(x);		// finds absolute root of set element x
	int ARy = find(y);		// finds absolute root of set element y

	parent[ARX] = ARy;		// make one of the Absolute root as parent and other as child
}

bool isCyclic(vector<pair<int,int>> &Edgelist)
{
	memset(parent,-1,sizeof(parent));	// Initially all nodes belong to seperate sets with only 1 element, and are absolute root of that set having no parent.

	for(auto e : Edgelist)
	{
		int from = find(e.first);		//finds absolute root of node e.first
		int to = find(e.second);		//finds absolute root of node e.second

		if(from == to)					// If they have same absolute root then it emplies that both of them belongs to the same set.
			return true;				// Hence a cycle is present.

		union(from,to);					// Otherwise take union of sets
	}

	return false;

}

int main()
{
	//fastIO();

	int V,E;				// Taking no. of nodes & edges as input.
	cin >> V >> E;

	vector<pair<int,int> > Edgelist;			// Taking all edges of the graph as input
	for(int i=0;i<E;i++)
	{
		int from,to;
		cin >> from >> to;
		Edgelist.push_back({from,to});
	}

	if(isCyclic(Edgelist))
		cout << "Cyclic\n";
	else
		cout << "Acyclic\n";

	return 0;
}
