#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

struct edge{		// Defining a edge structure
	int src;
	int dest;
	int wt;
};

void BellmanFord(vector<edge>& Edge,int V)
{
	vector<int> dist(V,INT_MAX),parent(V);

	dist[0] = 0;
	parent[0] = -1;

	bool update;
	for(int i=0;i<V-1;i++)					// Calling V-1 Iterations
	{
		update = false;
		for(int j=0;j<Edge.size();i++)		// In each iteration processing all edegs 
		{
			int f = Edge[j].src;
			int t = Edge[j].dest;
			int w = Edge[j].wt;

			if(dist[f] != INT_MAX && dist[f] + w < dist[t])
			{
				dist[t] = dist[f] + w;
				parent[t] = f;
				update = true;
			}
		}

		if(update == false)			// If no update if found in a particular iteration then no negative cycle is detected hence break out.
			break;
	}

	// Do one more iteration to check for the negative cycle i.e. if update is found to be true then negative cycle is present otherwise not.
	for(int i=0;i<Edge.size() && update == true;i++)
	{
		int f = Edge[j].src;
		int t = Edge[j].dest;
		int w = Edge[j].wt;

		if(dist[f] != INT_MAX && dist[f] + w < dist[t])
		{
			cout << "Graphs contains a negative cycle\n";
			return ;
		}		
	}

	// Otherwise, print shortest path form source to all vetices 
}

int main()
{
	//fastIO();

	int V,E;				// Taking no. of nodes & edges as input.
	cin >> V >> E;

	vector<edge> Edge(E);
	for(int i=0;i<E;i++)				// Taking all edges as input
	{
		int form,to,weight;
		cin >> from >> to >> weight;
		Edge[i].src = from;
		Edge[i].dest = to;
		Edge[i].wt = weight;
	}

	BellmanFord(Edge,V);

	return 0;
}
