#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const lli mod = 1e9+7;

bool visited[1001];			// Declaring visited array

void BFS(vector<int> arr[],int node)
{
	queue<int> q;
	q.push(node);					// push source node into queue

	visited[node] = true;			// mark source node visited

	while(!q.empty())
	{
		int u = q.front();
		q.pop();

		cout << u << "->";

		vector<int>:: iterator it;
		for(it=arr[u].begin();it!=arr[u].end();it++)			// push all unvisited adjacent nodes of u into the queue and mark them visited.
		{
			if(visited[*it] == false)
			{
				q.push(*it);
				visited[*it] = true;
			}
		}
	}
}

int main()
{
	//fastIO();
	
	memset(visited,false,sizeof(visited));      // Initially all nodes are marked un-visited. 

	int V,E;				// Taking no. of nodes & edges as input.
	cin >> V >> E;

	vector<int> arr[V];		// Declaring adjacency list of vector, of size V. 

	for(int i=0;i<E;i++)	// Reading all Edges in the graph.
	{
		int u,v;
		cin >> u >> v;			// emplies an edge from node u to v.
		arr[u].push_back(v);
		arr[v].push_back(u);	// for Undirected graph.
	}

	for(int i=0;i<V;i++)
	{
		if(visited[i] == false)
			BFS(arr,i);            // In case of disconnected graph
	}


	return 0;
}

/*
Complexity Analysis: 

Time complexity: O(V + E), where V is the number of vertices and E is the number of edges in the graph.

Space Complexity :O(V). Since an extra visited array is needed of size V.
*/

