#include <bits/stdc++.h>
                                                                                      // This solution work also if a graph contains a cycle.
using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

bool visited[1001];

void DFS(vector<int> arr[],int s,int d,int *count)
{
	if(s == d)
	{
		*count = *count +1;
		return ;
	}

	visited[s] = true;

	vector<int>:: iterator it;
	for(it=arr[s].begin();it!=arr[s].end();it++)
		if(visited[*it] == false)
			DFS(arr,*it,d,count);

	visited[s] = false;
}

int main()
{
	//fastIO();

	memset(visited,false,sizeof(visited));

	int V,E;
	cin >> V >> E;

	vector<int> arr[V];
	for(int i=0;i<E;i++)
	{
		int u,v;
		cin >> u >> v;

		arr[u].push_back(v);	// Directed Graph
	}

	int src,dest;
	cin >> src >> dest;

	int count = 0;
	DFS(arr,src,dest,&count);

	cout << "No. of paths from " << src << " to " << dest << " is " << count << "\n";

	return 0;
}
