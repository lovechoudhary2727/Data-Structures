#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const lli mod = 1e9+7;

bool visited[1001],isAncestor[1001];			// Declaring visited & isAncestor array

bool DFS(vector<int> arr[],int node)
{
	if(visited[node] == true)					// If a node is already visited & is ancestor, then cycle is detected otherwise not.
		return isAncestor[node] == true;

	visited[node] = true;						// mark it as visited.
	isAncestor[node] = true;					// mark it as ancestor of its descendents.

	vector<int>:: iterator it;
	for(it=arr[node].begin();it!=arr[node].end();it++)
	{
		if(DFS(arr,*it) == true)				// Check for cycle in any of its adjacent branch.
			return true;
	}

	isAncestor[node] = false;					// No cycle is detected after traversing all adjacent node, hence backtrack and unmark it as ancestor of its descendents.  
	return false;								// No cycle is detected.
}

bool isCyclic(vector<int> arr[],int V)
{
	memset(visited,false,sizeof(visited));			// Initially all nodes are marked unvisited.
	memset(isAncestor,false,sizeof(isAncestor));	// Initially none of the node is ancestor of its descendents.

	for(int i=0;i<V;i++)
	{
		if(visited[i]==false)
		{
			if(DFS(arr,i) == true)				// For disconnected graph
				return true;
		}
	}

	return false;
}

int main()
{
	//fastIO();

	int V,E;				// Taking no. of nodes & edges as input.
	cin >> V >> E;

	vector<int> arr[V];		// Declaring adjacency list of vector, of size V. 

	for(int i=0;i<E;i++)	// Reading all Edges in the graph.
	{
		int u,v;
		cin >> u >> v;			// emplies an edge from node u to v.
		arr[u].push_back(v);
	}

	if(isCyclic(arr,V) == true)
		cout << "Cyclic\n";
	else
		cout << "Acyclic\n";

	return 0;
}
