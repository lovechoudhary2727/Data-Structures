#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const lli mod = 1e9+7;

********USING RECURSION******************************************************************************************************************************************************

bool visited[1001];								// Declaring visited array.

void DFS(vector<int> arr[] ,int node)
{
	if(visited[node] == true)					// If already visited then backtrack.
		return ;

	visited[node] = true;						// If not visited, mark it visited and call DFS for all its adjacent nodes recursively.
	cout << node << " -> ";

	vector<int>:: iterator it;
	for(it=arr[node].begin();it!=arr[node].end();it++)
		DFS(arr,*it);

}

********USING STACK***********************************************************************************************************************************************************

void DFS(vector<int> arr[] ,int node)
{
	stack<int> s;
	s.push(node);								// Initializing stack with the source node.

	while(!s.empty())
	{
		int u = s.top();
		s.pop();

		if(visited[u] == false)					//Check whether the node is visited / not-visited. If it is not visited then mark it visited and push all unvisited adjacent nodes into the stack.
		{
			visited[u] = true;
			cout << u << " -> ";

			vector<int>:: iterator it;
			for(it=arr[u].begin();it!=arr[u].end();it++)
			{
				if(visited[*it] == false)
					s.push(*it);
			}
		}
	}

}

*******************************************************************************************************************************************************************************

int main()
{
	//fastIO();
	
	memset(visited,false,sizeof(visited));		// Initially all the nodes are marked as unvisited.

	int V,E;				// Taking no. of nodes & edges as input.
	cin >> V >> E;

	vector<int> arr[V];		// Declaring adjacency list of vector, of size V. 

	for(int i=0;i<E;i++)	// Reading all Edges in the graph.
	{
		int u,v;
		cin >> u >> v;			// emplies an edge from node u to v.
		arr[u].push_back(v);
		arr[v].push_back(u);	// for Undirected graph.
	}

	for(int i=0;i<V;i++)
	{
		if(visited[i] == false)
			DFS(arr,i);            // In case of disconnected graph
	}


	return 0;
}

/*
Complexity Analysis:
Time complexity: O(V + E), where V is the number of vertices and E is the number of edges in the graph.

Space Complexity: O(V). Since, an extra visited array is needed of size V
*/


