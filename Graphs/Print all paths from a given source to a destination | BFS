#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const int INF = 1e9+7;
const lli mod = 1e9+7;
enum Color {WHITE, GRAY, BLACK};

// utility function to check if current
// vertex is already present in path
int isNotVisited(int x, vector<int>& path)
{
    int size = path.size();
    for (int i = 0; i < size; i++) 
        if (path[i] == x) 
            return 0; 
    return 1;
}

void BFS(vector<int> arr[],int src,int dest)
{
    queue<vector<int> > q;		// create a queue which stores the paths
    vector<int> path;		    // path vector to store the current path
    
    path.push_back(src);
    q.push(path);

    while (!q.empty()) 
    {
        path = q.front();
        q.pop();
        int last = path[path.size() - 1];
 
 		//Print path
        if (last == dest)
        {
        	for (int i = 0; i < path.size(); i++) 
        		cout << path[i] << " ";    
    		  cout << "\n";
        } 
       
        vector<int>:: iterator it;
        for (it=arr[last].begin();it!=arr[last].end();it++) 		        // traverse to all the nodes connected to current vertex and push new path to queue
        {
            if (isNotVisited(*it, path)) 
            {
                vector<int> newpath(path);
                newpath.push_back(*it);
                q.push(newpath);
            }
        }
    }
}

int main()
{
	//fastIO();		

	int V,E;
	cin >> V >> E;

	vector<int> arr[V];
	for(int i=0;i<E;i++)
	{
		int u,v;
		cin >> u >> v;

		arr[u].push_back(v);	// Directed graph
		arr[v].push_back(u);	// Undirected graph
	}

	int source,destination;
	cin >> source >> destination;

	BFS(arr,source,destination);		

	return 0;
}
