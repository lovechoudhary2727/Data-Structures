#include <bits/stdc++.h>

using namespace std;
typedef long long int lli;
#define fastIO() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define llimit 1e18
#define slimit 1e9
#define matrix vector< vector<lli> >
const lli mod = 1e9+7;

enum Color {WHITE, GRAY, BLACK};

/*
WHITE : Vertex is not processed yet. Initially, all vertices are WHITE.

GRAY: Vertex is being processed (DFS for this vertex has started, but not finished which means that all descendants (in DFS tree) of this vertex are not processed yet (or this 
vertex is in the function call stack)

BLACK : Vertex and all its descendants are processed. While doing DFS, if an edge is encountered from current vertex to a GRAY vertex, then this edge is back edge and hence 
there is a cycle.
*/

bool DFS(vector<int> arr[],int node)
{
	color[node] = GRAY;									// Mark it as visited/GRAY.

	vector<int>:: iterator it;
	for(it=arr[node].begin();it!=arr[node].end();it++)
	{
		if(color[*it] == WHITE && DFS(arr,*it) == true)				// Check for cycle in any of its adjacent branch.
			return true;
		else if(color[*it] == GRAY)						// If its adjacent node is GRAY then cycle is detected.
			return true;
	}

	color[node] = BLACK;					// No cycle is detected after traversing all adjacent node, hence backtrack and mark it as BLACK.  
	return false;								// No cycle is detected.
}

bool isCyclic(vector<int> arr[],int V)
{
	int color[V];						// Declare a color[] to store the color of the nodes.
	for(int i=0;i<V;i++)	
		color[i] = WHITE;				// Initially are nodes are un-visited hence are marked WHITE.

	for(int i=0;i<V;i++)
	{
		if(color[i]==WHITE)
		{
			if(DFS(arr,i) == true)				// For disconnected graph
				return true;
		}
	}

	return false;
}

int main()
{
	//fastIO();

	int V,E;				// Taking no. of nodes & edges as input.
	cin >> V >> E;

	vector<int> arr[V];		// Declaring adjacency list of vector, of size V. 

	for(int i=0;i<E;i++)	// Reading all Edges in the graph.
	{
		int u,v;
		cin >> u >> v;			// emplies an edge from node u to v.
		arr[u].push_back(v);
	}

	if(isCyclic(arr,V) == true)
		cout << "Cyclic\n";
	else
		cout << "Acyclic\n";

	return 0;
}
